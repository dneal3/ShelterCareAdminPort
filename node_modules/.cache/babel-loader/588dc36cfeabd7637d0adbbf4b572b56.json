{"ast":null,"code":"// Initialize Firebase \nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nconst config = {\n  apiKey: \"AIzaSyDWT1HRjJ-p0jH5pjQPtWLSVuZ2xxyWIDU\",\n  authDomain: \"hfac-sc.firebaseapp.com\",\n  databaseURL: \"https://hfac-sc.firebaseio.com\",\n  projectId: \"hfac-sc\",\n  storageBucket: \"hfac-sc.appspot.com\",\n  messagingSenderId: \"432119133740\"\n};\n\nfunction parseString(inStr) {\n  var ret = inStr.replace(/\\./g, \"\");\n  var ret = inStr.replace(/#/g, \"\");\n  var ret = inStr.replace(/\\$/g, \"\");\n  var ret = inStr.replace(/\\[/g, \"\");\n  var ret = inStr.replace(/\\]/g, \"\");\n  return ret;\n}\n\nfunction findAdmin(toFind) {\n  // function that finds user in the database, returning an object isAdmin\n  // isAdmin is a bool that states if this account is a verified admin able to view the page\n  var db = firebase.database().ref();\n  const query = '/encounterAdmins/' + parseString(toFind);\n  var isAdmin = false;\n  console.log(\"database query: \" + query);\n  db.child(query).once('value').then(function (snapshot) {\n    if (snapshot.exists()) {\n      isAdmin = true;\n    } else {\n      alert(\"Signed in email is not an admin, contact system admin if this is incorrect\");\n      isAdmin = false;\n    }\n  });\n  return isAdmin;\n}\n\nclass Firebase {\n  constructor() {\n    firebase.initializeApp(config);\n    console.log(\"firebase intialized\");\n  }\n\n  doSignIn(cleanUpFunc) {\n    //signs in user if a user is not signed in already\n    var a = firebase.auth();\n\n    if (a.currentUser == null) {\n      console.log(\"signing in\");\n      var provider = new firebase.auth.GoogleAuthProvider();\n      var user = a.signInWithPopup(provider);\n      user.then(function (result) {\n        console.log(\"result: \", result);\n\n        if (findAdmin(result.user.email)) {\n          cleanUpFunc(result.user.email, true);\n        }\n      }) //error code that warns user of potential mishaps\n      .catch(function (error) {\n        var errorCode = error.code;\n\n        if (errorCode === \"auth/popup-closed-by-user\") {\n          console.log(\"Sign in window closed by user before finalizing authentication\");\n        } else {\n          alert(error);\n        }\n      });\n    } else {\n      console.log(\"user already signed in\");\n    }\n  }\n\n  doSignOut(cleanUpFunc) {\n    var a = firebase.auth();\n\n    if (a.currentUser != null) {\n      a.signOut();\n      cleanUpFunc();\n      console.log(\"signed out\");\n    }\n  }\n\n  checkStatus() {\n    var a = firebase.auth();\n\n    if (a.currentUser != null) {\n      console.log(\"user signed in\");\n    } else {\n      console.log(\"no user signed in\");\n    }\n  }\n\n}\n\nexport default Firebase;","map":{"version":3,"sources":["/Users/dloyd/summer_sc/shelter-care/src/components/firebase/app.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","parseString","inStr","ret","replace","findAdmin","toFind","db","database","ref","query","isAdmin","console","log","child","once","then","snapshot","exists","alert","Firebase","constructor","initializeApp","doSignIn","cleanUpFunc","a","auth","currentUser","provider","GoogleAuthProvider","user","signInWithPopup","result","email","catch","error","errorCode","code","doSignOut","signOut","checkStatus"],"mappings":"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","sourcesContent":["// Initialize Firebase \nimport firebase from 'firebase/app'; \nimport 'firebase/auth';\nimport 'firebase/database';\n  const config = {\n    apiKey: \"AIzaSyDWT1HRjJ-p0jH5pjQPtWLSVuZ2xxyWIDU\",\n    authDomain: \"hfac-sc.firebaseapp.com\",\n    databaseURL: \"https://hfac-sc.firebaseio.com\",\n    projectId: \"hfac-sc\",\n    storageBucket: \"hfac-sc.appspot.com\",\n    messagingSenderId: \"432119133740\"\n  };\n  function parseString(inStr)\n  {\n    var ret = inStr.replace(/\\./g, \"\");\n    var ret = inStr.replace(/#/g, \"\");\n    var ret = inStr.replace(/\\$/g, \"\");\n    var ret = inStr.replace(/\\[/g, \"\");\n    var ret = inStr.replace(/\\]/g, \"\");\n    return ret;\n  }\n  function findAdmin(toFind)\n    {\n      // function that finds user in the database, returning an object isAdmin\n      // isAdmin is a bool that states if this account is a verified admin able to view the page\n      var db = firebase.database().ref();\n      const query = '/encounterAdmins/'+parseString(toFind);\n      var isAdmin = false;\n      console.log(\"database query: \"+query);\n\n      db.child(query).once('value').then(function(snapshot) {\n        if(snapshot.exists())\n        {\n          isAdmin = true;\n        }\n        else\n        {\n          alert(\"Signed in email is not an admin, contact system admin if this is incorrect\");\n          isAdmin = false;\n        }\n      });\n      return isAdmin;\n    }\n  class Firebase{\n    constructor(){\n      firebase.initializeApp(config);\n      console.log(\"firebase intialized\");\n    }\n    doSignIn(cleanUpFunc) {\n      //signs in user if a user is not signed in already\n      var a = firebase.auth();\n      if(a.currentUser == null)\n      {\n        console.log(\"signing in\");\n        var provider = new firebase.auth.GoogleAuthProvider();\n        var user = a.signInWithPopup(provider);\n\n        user.then(function(result)\n        {\n          console.log(\"result: \", result);\n          if(findAdmin(result.user.email))\n          {\n            cleanUpFunc(result.user.email, true);\n          }\n        })\n        //error code that warns user of potential mishaps\n        .catch(function(error)\n        {\n         var errorCode = error.code;\n         if (errorCode === \"auth/popup-closed-by-user\")\n          {\n            console.log(\"Sign in window closed by user before finalizing authentication\");\n          }\n          else\n          {\n            alert(error);\n          }\n        });\n      }\n      else\n      {\n        console.log(\"user already signed in\");\n      }\n    }\n    doSignOut(cleanUpFunc){\n      var a = firebase.auth();\n      if(a.currentUser != null)\n      {\n        a.signOut();\n        cleanUpFunc();\n        console.log(\"signed out\");\n      }\n    }\n    checkStatus(){\n      var a = firebase.auth();\n      if(a.currentUser != null)\n      {\n        console.log(\"user signed in\");\n      }\n      else\n      {\n        console.log(\"no user signed in\");\n      }\n    }\n  }\n\n  export default Firebase;\n"]},"metadata":{},"sourceType":"module"}