{"ast":null,"code":"// Initialize Firebase \nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nconst config = {\n  apiKey: \"AIzaSyDWT1HRjJ-p0jH5pjQPtWLSVuZ2xxyWIDU\",\n  authDomain: \"hfac-sc.firebaseapp.com\",\n  databaseURL: \"https://hfac-sc.firebaseio.com\",\n  projectId: \"hfac-sc\",\n  storageBucket: \"hfac-sc.appspot.com\",\n  messagingSenderId: \"432119133740\"\n};\n\nfunction parseString(inStr) {\n  var ret = inStr.replace(/\\./g, \"\");\n  var ret = ret.replace(/#/g, \"\");\n  var ret = ret.replace(/\\$/g, \"\");\n  var ret = ret.replace(/\\[/g, \"\");\n  var ret = ret.replace(/\\]/g, \"\");\n  return ret;\n}\n\nfunction findAdmin(toFind, func) {\n  // function that finds user in the database, returning an object isAdmin\n  // isAdmin is a bool that states if this account is a verified admin able to view the page\n  var db = firebase.database().ref();\n  const query = '/encounterAdmins/' + parseString(toFind);\n  var isAdmin = \"\";\n  console.log(\"database query: \" + query);\n  db.child(query).once('value').then(function (snapshot) {\n    if (snapshot.exists()) {\n      console.log(\"exists\");\n      isAdmin = true;\n      func(toFind, true);\n    } else {\n      alert(\"Signed in email is not an admin, contact system admin if this is incorrect\");\n      firebase.auth().signOut();\n    }\n  });\n  console.log(isAdmin);\n  return isAdmin;\n}\n\nclass Firebase {\n  constructor() {\n    firebase.initializeApp(config);\n    console.log(\"firebase intialized\");\n  }\n\n  doSignIn(cleanUpFunc) {\n    //signs in user if a user is not signed in already\n    var a = firebase.auth();\n\n    if (a.currentUser == null) {\n      console.log(\"signing in\");\n      var provider = new firebase.auth.GoogleAuthProvider();\n      var user = a.signInWithPopup(provider);\n      user.then(function (result) {\n        findAdmin(result.user.email, cleanUpFunc);\n      }) //error code that warns user of potential mishaps\n      .catch(function (error) {\n        var errorCode = error.code;\n\n        if (errorCode === \"auth/popup-closed-by-user\") {\n          console.log(\"Sign in window closed by user before finalizing authentication\");\n        } else {\n          alert(error);\n        }\n      });\n    } else {\n      console.log(\"user already signed in\");\n    }\n  }\n\n  doSignOut(cleanUpFunc) {\n    var a = firebase.auth();\n\n    if (a.currentUser != null) {\n      a.signOut();\n      cleanUpFunc();\n      console.log(\"signed out\");\n    }\n  }\n\n  doAddAdmin(adminToAdd, statusBind) {\n    //Attemps to add an admin to the database\n    var db = firebase.database().ref();\n    const parsedAdminStr = parseString(adminToAdd);\n    const query = '/encounterAdmins/' + parsedAdminStr;\n    db.child(query).once('value').then(function (snapshot) {\n      if (snapshot.exists()) {\n        statusBind(\"Failed to add admin \" + adminToAdd + \"\\n REASON: Admin already exists in database\");\n      } else {\n        var updates = {};\n        updates[query] = true;\n        db.update(updates);\n        statusBind(\"Successfully added admin \" + adminToAdd);\n        return;\n      }\n    }).catch(function (error) {\n      alert(\"An error occurred: \", error);\n      statusBind(\"Failed to add admin \" + adminToAdd + \" REASON: \" + error);\n    });\n  }\n\n  doDeleteAdmin(adminToDel, statusBind) {\n    //Attemps to delete an admin to the database\n    var db = firebase.database().ref();\n    const parsedAdminStr = parseString(adminToDel);\n    const query = '/encounterAdmins/' + parsedAdminStr;\n    db.child(query).once('value').then(function (snapshot) {\n      if (snapshot.exists()) {\n        var confirmStr = \"are you sure you want to delete \" + adminToDel + \"?\";\n\n        if (window.confirm(confirmStr)) {\n          db.child(query).remove();\n          statusBind(\"Successfully deleted admin \" + adminToDel);\n        } else {\n          statusBind(\"Deletion of admin \" + adminToDel + \" aborted by user\");\n        }\n\n        return;\n      } else {\n        alert(\"This admin does not exist in the database\");\n        statusBind(\"Admin does not exist in database\");\n      }\n    }).catch(function (error) {\n      alert(\"An error occurred: \", error);\n      statusBind(\"Failed to delete admin \" + adminToDel + \"/n REASON: \" + error);\n    });\n  }\n\n  checkStatus(signInFunc) {\n    var a = firebase.auth();\n\n    if (a.currentUser != null) {\n      console.log(\"CheckStatus says: user signed in\");\n      signInFunc(a.currentUser.email, true);\n    } else {\n      console.log(\"CheckStatus says: no user signed in\");\n    }\n  }\n\n  test() {\n    console.log(\"working\");\n  }\n\n}\n\nexport default Firebase;","map":{"version":3,"sources":["/Users/dloyd/summer_sc/shelter-care/src/components/firebase/app.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","parseString","inStr","ret","replace","findAdmin","toFind","func","db","database","ref","query","isAdmin","console","log","child","once","then","snapshot","exists","alert","auth","signOut","Firebase","constructor","initializeApp","doSignIn","cleanUpFunc","a","currentUser","provider","GoogleAuthProvider","user","signInWithPopup","result","email","catch","error","errorCode","code","doSignOut","doAddAdmin","adminToAdd","statusBind","parsedAdminStr","updates","update","doDeleteAdmin","adminToDel","confirmStr","window","confirm","remove","checkStatus","signInFunc","test"],"mappings":"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","sourcesContent":["// Initialize Firebase \nimport firebase from 'firebase/app'; \nimport 'firebase/auth';\nimport 'firebase/database';\n  const config = {\n    apiKey: \"AIzaSyDWT1HRjJ-p0jH5pjQPtWLSVuZ2xxyWIDU\",\n    authDomain: \"hfac-sc.firebaseapp.com\",\n    databaseURL: \"https://hfac-sc.firebaseio.com\",\n    projectId: \"hfac-sc\",\n    storageBucket: \"hfac-sc.appspot.com\",\n    messagingSenderId: \"432119133740\"\n  };\n  function parseString(inStr)\n  {\n    var ret = inStr.replace(/\\./g, \"\");\n    var ret = ret.replace(/#/g, \"\");\n    var ret = ret.replace(/\\$/g, \"\");\n    var ret = ret.replace(/\\[/g, \"\");\n    var ret = ret.replace(/\\]/g, \"\");\n    return ret;\n  }\n  function findAdmin(toFind, func)\n    {\n      // function that finds user in the database, returning an object isAdmin\n      // isAdmin is a bool that states if this account is a verified admin able to view the page\n      var db = firebase.database().ref();\n      const query = '/encounterAdmins/'+parseString(toFind);\n      var isAdmin = \"\";\n      console.log(\"database query: \"+query);\n\n      db.child(query).once('value').then(function(snapshot) {\n        if(snapshot.exists())\n        {\n          console.log(\"exists\");\n          isAdmin = true;\n          func(toFind, true);\n        }\n        else\n        {\n          alert(\"Signed in email is not an admin, contact system admin if this is incorrect\");\n          firebase.auth().signOut();  \n        }\n      });\n      console.log(isAdmin);\n      return isAdmin;\n    }\n  class Firebase{\n    constructor(){\n      firebase.initializeApp(config);\n      console.log(\"firebase intialized\");\n    }\n    doSignIn(cleanUpFunc) {\n      //signs in user if a user is not signed in already\n      var a = firebase.auth();\n      if(a.currentUser == null)\n      {\n        console.log(\"signing in\");\n        var provider = new firebase.auth.GoogleAuthProvider();\n        var user = a.signInWithPopup(provider);\n\n        user.then(function(result)\n        {\n          findAdmin(result.user.email, cleanUpFunc)\n        })\n        //error code that warns user of potential mishaps\n        .catch(function(error)\n        {\n         var errorCode = error.code;\n         if (errorCode === \"auth/popup-closed-by-user\")\n          {\n            console.log(\"Sign in window closed by user before finalizing authentication\");\n          }\n          else\n          {\n            alert(error);\n          }\n        });\n      }\n      else\n      {\n        console.log(\"user already signed in\");\n      }\n    }\n    doSignOut(cleanUpFunc){\n      var a = firebase.auth();\n      if(a.currentUser != null)\n      {\n        a.signOut();\n        cleanUpFunc();\n        console.log(\"signed out\");\n      }\n    }\n    doAddAdmin(adminToAdd, statusBind)\n    {\n      //Attemps to add an admin to the database\n      var db = firebase.database().ref();\n      const parsedAdminStr = parseString(adminToAdd);\n      const query = '/encounterAdmins/'+parsedAdminStr;\n\n      db.child(query).once('value').then(function(snapshot) {\n        if(snapshot.exists())\n        {\n          statusBind(\"Failed to add admin \" + adminToAdd +\"\\n REASON: Admin already exists in database\");\n        }\n        else\n        {\n          var updates = {};\n          updates[query] = true;\n          db.update(updates);\n          statusBind(\"Successfully added admin \" + adminToAdd);\n          return ;\n        }\n      })\n      .catch(function(error) {\n        alert(\"An error occurred: \", error);\n        statusBind(\"Failed to add admin \" + adminToAdd+\" REASON: \"+error);\n      });\n    }\n    doDeleteAdmin(adminToDel, statusBind)\n    {\n      //Attemps to delete an admin to the database\n      var db = firebase.database().ref();\n      const parsedAdminStr = parseString(adminToDel);\n      const query = '/encounterAdmins/'+parsedAdminStr;\n\n      db.child(query).once('value').then(function(snapshot) {\n        if(snapshot.exists())\n        {\n          var confirmStr = \"are you sure you want to delete \" + adminToDel + \"?\";\n          if(window.confirm(confirmStr))\n          {\n            db.child(query).remove();\n            statusBind(\"Successfully deleted admin \"+ adminToDel);\n          }\n          else\n          {\n            statusBind(\"Deletion of admin \"+ adminToDel +\" aborted by user\");\n          }\n          return ;\n        }\n        else\n        {\n          alert(\"This admin does not exist in the database\");\n          statusBind(\"Admin does not exist in database\");\n        }\n      })\n      .catch(function(error) {\n        alert(\"An error occurred: \", error);\n        statusBind(\"Failed to delete admin \"+ adminToDel+\"/n REASON: \" +error);\n      });\n    }\n    checkStatus(signInFunc){\n      var a = firebase.auth();\n      if(a.currentUser != null)\n      {\n        console.log(\"CheckStatus says: user signed in\");\n        signInFunc(a.currentUser.email,true)\n      }\n      else\n      {\n        console.log(\"CheckStatus says: no user signed in\");\n      }\n    }\n    test()\n    {\n      console.log(\"working\");\n    }\n  }\n\n  export default Firebase;\n"]},"metadata":{},"sourceType":"module"}