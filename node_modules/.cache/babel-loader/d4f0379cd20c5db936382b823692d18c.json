{"ast":null,"code":"var _jsxFileName = \"/Users/dloyd/summer_sc/shelter-care/src/components/admin/index.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { FirebaseContext } from '../firebase';\nimport Fields from '../fieldBar';\n\nclass Admin extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      statusStr: \"Status: no action yet taken\",\n      responseList: [],\n      responseQuery: \"\"\n    };\n    setTimeout(this.init.bind(this), 200);\n  }\n\n  init() {\n    this.setSearch(\"all\");\n  }\n\n  setStatus(newStatus) {\n    this.setState({\n      statusStr: \"Status: \" + newStatus\n    });\n  }\n\n  updateList(newElement, clearList = false) {\n    //updates the list, clearing it instead if clearList = true\n    var newList;\n\n    if (clearList) {\n      newList = [];\n    } else {\n      newList = this.state.responseList;\n      newList.push(newElement);\n    }\n\n    this.setState({\n      responseList: newList\n    });\n  }\n\n  getField(field) {\n    //returns the react elements to render the list of the given field\n    const fieldList = this.state.responseList;\n    const fieldItems = fieldList.map(item => React.createElement(\"li\", {\n      key: item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, item));\n    return fieldItems;\n  }\n\n  setSearch(field, event) {\n    //sets the search value of the given field\n    if (field === \"all\") {\n      window.document.getElementById(\"searchResponse\").click();\n    } else if (field === \"response\") {\n      window.document.getElementById(\"searchResponse\").click();\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Page only for admins to see\"), React.createElement(\"p\", {\n      id: \"statusInformer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, this.state.statusStr)), React.createElement(FirebaseContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, firebaseIn => React.createElement(Fields, {\n      firebase: firebaseIn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  //return object with key value pairs that this component can use\n  // localPropName: globalStateNameFromRedux\n  return {\n    fields: state.fieldReducer\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  //return object with key value pairs that this component can use\n  // localPropName: function that will call redux store dispatch\n  return {\n    changeSearch: (searchType, newQuery) => {\n      dispatch({\n        type: searchType,\n        payload: newQuery\n      });\n    },\n    resetSearches: () => {\n      dispatch({\n        type: \"CLEARALLSEARCHES\"\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Admin);","map":{"version":3,"sources":["/Users/dloyd/summer_sc/shelter-care/src/components/admin/index.js"],"names":["React","connect","FirebaseContext","Fields","Admin","Component","constructor","state","statusStr","responseList","responseQuery","setTimeout","init","bind","setSearch","setStatus","newStatus","setState","updateList","newElement","clearList","newList","push","getField","field","fieldList","fieldItems","map","item","event","window","document","getElementById","click","render","firebaseIn","mapStateToProps","fields","fieldReducer","mapDispatchToProps","dispatch","changeSearch","searchType","newQuery","type","payload","resetSearches"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport {FirebaseContext} from '../firebase';\nimport Fields from '../fieldBar';\nclass Admin extends React.Component\n{\n    constructor()\n    {\n        super();\n        this.state = {\n            statusStr: \"Status: no action yet taken\",\n            responseList: [],\n            responseQuery: \"\"\n        };\n        setTimeout(this.init.bind(this), 200);\n    }\n    init()\n    {\n        this.setSearch(\"all\");\n    }\n    setStatus(newStatus)\n    {\n        this.setState({statusStr: \"Status: \"+newStatus});\n    }\n    updateList(newElement, clearList=false)\n    {\n        //updates the list, clearing it instead if clearList = true\n        var newList;\n        if(clearList)\n        {\n            newList = []\n        }\n        else\n        {\n            newList = this.state.responseList;\n            newList.push(newElement);\n\n        }\n        this.setState({responseList: newList});\n    }\n    getField(field)\n    {\n        //returns the react elements to render the list of the given field\n        const fieldList = this.state.responseList;\n        const fieldItems = fieldList.map((item) => <li key={item}>{item}</li>)\n         return fieldItems;\n    }\n    setSearch(field, event)\n    {\n        //sets the search value of the given field\n        if(field === \"all\")\n        {\n            window.document.getElementById(\"searchResponse\").click();\n\n        }\n        else if(field === \"response\")\n        {\n            window.document.getElementById(\"searchResponse\").click();\n        }\n        \n    }\n    render(){\n        return(\n            \n        <div>\n            <div>\n                <p>\n                   Page only for admins to see\n                </p>\n                <p id=\"statusInformer\">{this.state.statusStr}</p>\n            </div>\n            <FirebaseContext.Consumer>\n                {\n                    firebaseIn => \n                    <Fields firebase = {firebaseIn}/>\n                }\n            </FirebaseContext.Consumer>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n\t//return object with key value pairs that this component can use\n\t// localPropName: globalStateNameFromRedux\n\treturn {\n        fields: state.fieldReducer\n\t};\n};\nconst mapDispatchToProps = (dispatch) => {\n\t//return object with key value pairs that this component can use\n\t// localPropName: function that will call redux store dispatch\n\treturn {\n            changeSearch: (searchType, newQuery) => {dispatch({\n                type: searchType,\n                payload: newQuery})},\n            resetSearches: () => {dispatch({\n                type: \"CLEARALLSEARCHES\"\n            });\n        }\n\t};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Admin);\n"]},"metadata":{},"sourceType":"module"}