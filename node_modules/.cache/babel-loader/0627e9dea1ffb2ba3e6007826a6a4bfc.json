{"ast":null,"code":"// Initialize Firebase \nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nconst config = {\n  apiKey: \"AIzaSyDWT1HRjJ-p0jH5pjQPtWLSVuZ2xxyWIDU\",\n  authDomain: \"hfac-sc.firebaseapp.com\",\n  databaseURL: \"https://hfac-sc.firebaseio.com\",\n  projectId: \"hfac-sc\",\n  storageBucket: \"hfac-sc.appspot.com\",\n  messagingSenderId: \"432119133740\"\n};\n\nfunction parseString(inStr) {\n  var ret = inStr.replace(/\\./g, \"\");\n  var ret = ret.replace(/#/g, \"\");\n  var ret = ret.replace(/\\$/g, \"\");\n  var ret = ret.replace(/\\[/g, \"\");\n  var ret = ret.replace(/\\]/g, \"\");\n  return ret;\n}\n\nfunction findAdmin(toFind, func) {\n  // function that finds user in the database, returning an object isAdmin\n  // isAdmin is a bool that states if this account is a verified admin able to view the page\n  var db = firebase.database().ref();\n  const query = '/admins/' + parseString(toFind);\n  var isAdmin = \"\";\n  console.log(\"database query: \" + query);\n  db.child(query).once('value').then(function (snapshot) {\n    if (snapshot.exists()) {\n      console.log(\"exists\");\n      isAdmin = true;\n      func(toFind, true);\n    } else {\n      alert(\"Signed in email is not an admin, contact system admin if this is incorrect\");\n      firebase.auth().signOut();\n    }\n  });\n  console.log(isAdmin);\n  return isAdmin;\n}\n\nfunction doAddHelper(refs) {\n  //Attemps to add an object to the database\n  //recieves an object with attributes type, adding, statusFunc, then adds these to the\n  //    database to the corresponding values\n  var db = firebase.database().ref();\n  const parsedStr = parseString(refs.adding);\n  const query = '/' + refs.type + 's/' + parsedStr;\n  db.child(query).once('value').then(function (snapshot) {\n    if (snapshot.exists()) {\n      refs.statusFunc(\"Failed to add \" + refs.type + \" \" + refs.adding + \"\\n REASON: \" + refs.type + \" already exists in database\");\n    } else {\n      var updates = {};\n      updates[query] = true;\n      db.update(updates);\n      refs.statusFunc(\"Successfully added \" + refs.type + \" \" + refs.adding);\n      return;\n    }\n  }).catch(function (error) {\n    alert(\"An error occurred: \", error);\n    refs.statusFunc(\"Failed to add \" + refs.type + \" \" + refs.adding + \" REASON: \" + error);\n  });\n}\n\nfunction doDeleteHelper(refs) {\n  //Attemps to delete an user to the database\n  var db = firebase.database().ref();\n  const parsedStr = parseString(refs.deleting);\n  const query = '/' + refs.type + 's/' + parsedStr;\n  db.child(query).once('value').then(function (snapshot) {\n    if (snapshot.exists()) {\n      var confirmStr = \"are you sure you want to delete the \" + refs.type + \" \" + refs.deleting + \"?\";\n\n      if (window.confirm(confirmStr)) {\n        db.child(query).remove();\n        refs.statusFunc(\"Successfully deleted \" + refs.type + \" \" + refs.deleting);\n      } else {\n        refs.statusFunc(\"Deletion of \" + refs.type + \" \" + refs.deleting + \" aborted by user\");\n      }\n\n      return;\n    } else {\n      alert(\"This \" + refs.type + \" does not exist in the database\");\n      refs.statusFunc(refs.type + \" \" + refs.deleting + \" does not exist in database\");\n    }\n  }).catch(function (error) {\n    alert(\"An error occurred: \", error);\n    refs.statusFunc(\"Failed to delete \" + refs.type + \" \" + refs.deleting + \"/n REASON: \" + error);\n  });\n}\n\nclass Firebase {\n  constructor() {\n    firebase.initializeApp(config);\n    console.log(\"firebase intialized\");\n  }\n\n  doSignIn(cleanUpFunc) {\n    //signs in user if a user is not signed in already\n    var a = firebase.auth();\n\n    if (a.currentUser == null) {\n      console.log(\"signing in\");\n      var provider = new firebase.auth.GoogleAuthProvider();\n      var user = a.signInWithPopup(provider);\n      user.then(function (result) {\n        findAdmin(result.user.email, cleanUpFunc);\n      }) //error code that warns user of potential mishaps\n      .catch(function (error) {\n        var errorCode = error.code;\n\n        if (errorCode === \"auth/popup-closed-by-user\") {\n          console.log(\"Sign in window closed by user before finalizing authentication\");\n        } else {\n          alert(error);\n        }\n      });\n    } else {\n      console.log(\"user already signed in\");\n    }\n  }\n\n  doSignOut(cleanUpFunc) {\n    var a = firebase.auth();\n\n    if (a.currentUser != null) {\n      a.signOut();\n      cleanUpFunc();\n      console.log(\"signed out\");\n    }\n  }\n\n  doAddAdmin(adminToAdd, statusBind) {\n    //Attemps to add an admin to the database\n    var obj = {\n      type: \"admin\",\n      adding: adminToAdd,\n      statusFunc: statusBind\n    };\n    doAddHelper(obj);\n  }\n\n  doDeleteAdmin(adminToDel, statusBind) {\n    //Attemps to delete an admin to the database\n    var obj = {\n      type: \"admin\",\n      deleting: adminToDel,\n      statusFunc: statusBind\n    };\n    doDeleteHelper(obj);\n  }\n\n  doAddUser(userToAdd, statusBind) {\n    var obj = {\n      type: \"user\",\n      adding: userToAdd,\n      statusFunc: statusBind\n    };\n    doAddHelper(obj);\n  }\n\n  doDeleteUser(userToDel, statusBind) {\n    var obj = {\n      type: \"user\",\n      deleting: userToDel,\n      statusFunc: statusBind\n    };\n    doDeleteHelper(obj);\n  }\n\n  checkStatus(signInFunc) {\n    var a = firebase.auth();\n\n    if (a.currentUser != null) {\n      console.log(\"CheckStatus says: user signed in\");\n      signInFunc(a.currentUser.email, true);\n    } else {\n      console.log(\"CheckStatus says: no user signed in\");\n    }\n  }\n\n  test() {\n    console.log(\"working\");\n  }\n\n}\n\nexport default Firebase;","map":{"version":3,"sources":["/Users/dloyd/summer_sc/shelter-care/src/components/firebase/app.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","parseString","inStr","ret","replace","findAdmin","toFind","func","db","database","ref","query","isAdmin","console","log","child","once","then","snapshot","exists","alert","auth","signOut","doAddHelper","refs","parsedStr","adding","type","statusFunc","updates","update","catch","error","doDeleteHelper","deleting","confirmStr","window","confirm","remove","Firebase","constructor","initializeApp","doSignIn","cleanUpFunc","a","currentUser","provider","GoogleAuthProvider","user","signInWithPopup","result","email","errorCode","code","doSignOut","doAddAdmin","adminToAdd","statusBind","obj","doDeleteAdmin","adminToDel","doAddUser","userToAdd","doDeleteUser","userToDel","checkStatus","signInFunc","test"],"mappings":"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","sourcesContent":["// Initialize Firebase \nimport firebase from 'firebase/app'; \nimport 'firebase/auth';\nimport 'firebase/database';\n  const config = {\n    apiKey: \"AIzaSyDWT1HRjJ-p0jH5pjQPtWLSVuZ2xxyWIDU\",\n    authDomain: \"hfac-sc.firebaseapp.com\",\n    databaseURL: \"https://hfac-sc.firebaseio.com\",\n    projectId: \"hfac-sc\",\n    storageBucket: \"hfac-sc.appspot.com\",\n    messagingSenderId: \"432119133740\"\n  };\n  function parseString(inStr)\n  {\n    var ret = inStr.replace(/\\./g, \"\");\n    var ret = ret.replace(/#/g, \"\");\n    var ret = ret.replace(/\\$/g, \"\");\n    var ret = ret.replace(/\\[/g, \"\");\n    var ret = ret.replace(/\\]/g, \"\");\n    return ret;\n  }\n  function findAdmin(toFind, func)\n    {\n      // function that finds user in the database, returning an object isAdmin\n      // isAdmin is a bool that states if this account is a verified admin able to view the page\n      var db = firebase.database().ref();\n      const query = '/admins/'+parseString(toFind);\n      var isAdmin = \"\";\n      console.log(\"database query: \"+query);\n\n      db.child(query).once('value').then(function(snapshot) {\n        if(snapshot.exists())\n        {\n          console.log(\"exists\");\n          isAdmin = true;\n          func(toFind, true);\n        }\n        else\n        {\n          alert(\"Signed in email is not an admin, contact system admin if this is incorrect\");\n          firebase.auth().signOut();  \n        }\n      });\n      console.log(isAdmin);\n      return isAdmin;\n    }\n    function doAddHelper(refs)\n    {\n      //Attemps to add an object to the database\n      //recieves an object with attributes type, adding, statusFunc, then adds these to the\n      //    database to the corresponding values\n      var db = firebase.database().ref();\n      const parsedStr = parseString(refs.adding);\n      const query = '/'+refs.type+'s/'+parsedStr;\n\n      db.child(query).once('value').then(function(snapshot) {\n        if(snapshot.exists())\n        {\n          refs.statusFunc(\"Failed to add \"+ refs.type+\" \" + refs.adding +\"\\n REASON: \"+ refs.type+\" already exists in database\");\n        }\n        else\n        {\n          var updates = {};\n          updates[query] = true;\n          db.update(updates);\n          refs.statusFunc(\"Successfully added \"+ refs.type+\" \" + refs.adding);\n          return ;\n        }\n      })\n      .catch(function(error) {\n        alert(\"An error occurred: \", error);\n        refs.statusFunc(\"Failed to add \"+ refs.type+\" \" + refs.adding + \" REASON: \" +error);\n      });\n    }\n    function doDeleteHelper(refs)\n    {\n      //Attemps to delete an user to the database\n      var db = firebase.database().ref();\n      const parsedStr = parseString(refs.deleting);\n      const query = '/'+refs.type+'s/'+parsedStr;\n\n      db.child(query).once('value').then(function(snapshot) {\n        if(snapshot.exists())\n        {\n          var confirmStr = \"are you sure you want to delete the \"+refs.type+ \" \"+ refs.deleting + \"?\";\n          if(window.confirm(confirmStr))\n          {\n            db.child(query).remove();\n            refs.statusFunc(\"Successfully deleted \"+refs.type+ \" \"+ refs.deleting);\n          }\n          else\n          {\n            refs.statusFunc(\"Deletion of \"+refs.type+ \" \"+ refs.deleting +\" aborted by user\");\n          }\n          return ;\n        }\n        else\n        {\n          alert(\"This \"+refs.type+ \" does not exist in the database\");\n          refs.statusFunc(refs.type+ \" \" + refs.deleting +\" does not exist in database\");\n        }\n      })\n      .catch(function(error) {\n        alert(\"An error occurred: \", error);\n        refs.statusFunc(\"Failed to delete \"+refs.type+ \" \"+ refs.deleting+\"/n REASON: \" +error);\n      });\n    }\n  class Firebase{\n    constructor(){\n      firebase.initializeApp(config);\n      console.log(\"firebase intialized\");\n    }\n    doSignIn(cleanUpFunc) {\n      //signs in user if a user is not signed in already\n      var a = firebase.auth();\n      if(a.currentUser == null)\n      {\n        console.log(\"signing in\");\n        var provider = new firebase.auth.GoogleAuthProvider();\n        var user = a.signInWithPopup(provider);\n\n        user.then(function(result)\n        {\n          findAdmin(result.user.email, cleanUpFunc)\n        })\n        //error code that warns user of potential mishaps\n        .catch(function(error)\n        {\n         var errorCode = error.code;\n         if (errorCode === \"auth/popup-closed-by-user\")\n          {\n            console.log(\"Sign in window closed by user before finalizing authentication\");\n          }\n          else\n          {\n            alert(error);\n          }\n        });\n      }\n      else\n      {\n        console.log(\"user already signed in\");\n      }\n    }\n    doSignOut(cleanUpFunc){\n      var a = firebase.auth();\n      if(a.currentUser != null)\n      {\n        a.signOut();\n        cleanUpFunc();\n        console.log(\"signed out\");\n      }\n    }\n    doAddAdmin(adminToAdd, statusBind)\n    {\n      //Attemps to add an admin to the database\n      var obj = {\n        type: \"admin\",\n        adding: adminToAdd,\n        statusFunc: statusBind\n      };\n      doAddHelper(obj);\n    }\n    doDeleteAdmin(adminToDel, statusBind)\n    {\n      //Attemps to delete an admin to the database\n      var obj = {\n        type: \"admin\",\n        deleting: adminToDel,\n        statusFunc: statusBind\n      };\n      doDeleteHelper(obj);\n    }\n    doAddUser(userToAdd, statusBind)\n    {\n      var obj = {\n        type: \"user\",\n        adding: userToAdd,\n        statusFunc: statusBind\n      };\n      doAddHelper(obj);\n    }\n    doDeleteUser(userToDel, statusBind)\n    {\n      var obj = {\n        type: \"user\",\n        deleting: userToDel,\n        statusFunc: statusBind\n      };\n      doDeleteHelper(obj);\n    }\n    checkStatus(signInFunc){\n      var a = firebase.auth();\n      if(a.currentUser != null)\n      {\n        console.log(\"CheckStatus says: user signed in\");\n        signInFunc(a.currentUser.email,true)\n      }\n      else\n      {\n        console.log(\"CheckStatus says: no user signed in\");\n      }\n    }\n    test()\n    {\n      console.log(\"working\");\n    }\n  }\n\n  export default Firebase;\n"]},"metadata":{},"sourceType":"module"}