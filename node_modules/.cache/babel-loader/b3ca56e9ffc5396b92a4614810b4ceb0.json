{"ast":null,"code":"var _jsxFileName = \"/Users/dloyd/summer_sc/ShelterCareAdminPort/src/components/admin/index.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { FirebaseContext } from '../firebase';\nimport Fields from '../fieldBar';\n\nclass Admin extends React.Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Page only for admins to see\"), React.createElement(\"p\", {\n      id: \"statusInformer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"Status: \" + this.props.status)), React.createElement(FirebaseContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, firebaseIn => React.createElement(Fields, {\n      firebase: firebaseIn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  //return object with key value pairs that this component can use\n  // localPropName: globalStateNameFromRedux\n  return {\n    status: state.fieldReducer.status\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  //this function must exist to call connect, but we dont actually need it\n  return {\n    nada: dispatch => {}\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Admin);","map":{"version":3,"sources":["/Users/dloyd/summer_sc/ShelterCareAdminPort/src/components/admin/index.js"],"names":["React","connect","FirebaseContext","Fields","Admin","Component","constructor","render","props","status","firebaseIn","mapStateToProps","state","fieldReducer","mapDispatchToProps","dispatch","nada"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,eAAR,QAA8B,aAA9B;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AACA,MAAMC,KAAN,SAAoBJ,KAAK,CAACK,SAA1B,CACA;AACIC,EAAAA,WAAW,GACX;AACI;AACH;;AACDC,EAAAA,MAAM,GAAE;AACJ,WACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADJ,EAII;AAAG,MAAA,EAAE,EAAC,gBAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwB,aAAW,KAAKC,KAAL,CAAWC,MAA9C,CAJJ,CADJ,EAOI,oBAAC,eAAD,CAAiB,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQC,UAAU,IACV,oBAAC,MAAD;AAAQ,MAAA,QAAQ,EAAIA,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHR,CAPJ,CADA;AAgBH;;AAtBL;;AAyBA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAClC;AACA;AACA,SAAO;AACAH,IAAAA,MAAM,EAAEG,KAAK,CAACC,YAAN,CAAmBJ;AAD3B,GAAP;AAGA,CAND;;AAOA,MAAMK,kBAAkB,GAAIC,QAAD,IAAc;AACrC;AAIH,SAAO;AAACC,IAAAA,IAAI,EAAGD,QAAD,IAAY,CAAE;AAArB,GAAP;AAEA,CAPD;;AASA,eAAed,OAAO,CAACU,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CV,KAA7C,CAAf","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport {FirebaseContext} from '../firebase';\nimport Fields from '../fieldBar';\nclass Admin extends React.Component\n{\n    constructor()\n    {\n        super();\n    }\n    render(){\n        return(     \n        <div>\n            <div>\n                <p>\n                   Page only for admins to see\n                </p>\n                <p id=\"statusInformer\">{\"Status: \"+this.props.status}</p>\n            </div>\n            <FirebaseContext.Consumer>\n                {\n                    firebaseIn => \n                    <Fields firebase = {firebaseIn}/>\n                }\n            </FirebaseContext.Consumer>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n\t//return object with key value pairs that this component can use\n\t// localPropName: globalStateNameFromRedux\n\treturn {\n        status: state.fieldReducer.status\n\t};\n};\nconst mapDispatchToProps = (dispatch) => {\n    //this function must exist to call connect, but we dont actually need it\n    \n\n    \n\treturn {nada: (dispatch)=>{}\n\t};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Admin);\n"]},"metadata":{},"sourceType":"module"}