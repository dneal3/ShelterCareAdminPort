{"ast":null,"code":"import _objectSpread from \"/Users/dloyd/summer_sc/ShelterCareAdminPort/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/dloyd/summer_sc/ShelterCareAdminPort/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\nimport Firebase, { FirebaseContext } from './components/firebase';\nimport { emptyMsg } from './constants/emptyMessages';\nconst initialState = {\n  userSignedIn: false,\n  email: \"\",\n  userName: \"\"\n};\n\nconst userAuthReducer = (state = initialState, action) => {\n  //state takes in an intial state at program intialization, all other calls will have a state input\n  var newState = _objectSpread({}, state);\n\n  switch (action.type) {\n    case \"SIGNIN\":\n      newState.email = action.payload.email;\n      newState.userName = action.payload.userName;\n      newState.userSignedIn = true;\n      newState.isAdmin = action.payload.isAdmin;\n      break;\n\n    case \"SIGNOUT\":\n      newState.userSignedIn = false;\n      newState.isAdmin = false;\n      newState.email = \"\";\n      newState.userName = \"\";\n      break;\n\n    default:\n      //console.log(\"error in userAuthReducer, unknown action type: \", action.type);\n      break;\n  }\n\n  return newState;\n};\n\nconst initialFieldState = {\n  responseField: [],\n  issueField: [],\n  userField: [],\n  adminField: [],\n  programField: [],\n  addressField: [],\n  status: \"no action taken\"\n};\n\nfunction freshen(listIn) {\n  // removes no entries message from the list\n  if (listIn.length == 1 && listIn[0] === emptyMsg) {\n    console.log(\"popping from: \", listIn);\n    listIn.pop();\n  }\n}\n\nconst fieldReducer = (state = initialFieldState, action) => {\n  var newState = _objectSpread({}, state);\n\n  var length, i;\n  var newList = [];\n\n  switch (action.type) {\n    case \"UPDATESTATUS\":\n      newState.status = action.payload;\n      break;\n\n    case \"CLEARLIST\":\n      var emptyList = [];\n\n      switch (action.payload) {\n        case \"all\":\n          newState = initialFieldState;\n          newState.status = state.status;\n          break;\n\n        case \"admin\":\n          newState.adminField = emptyList;\n          break;\n\n        case \"address\":\n          newState.addressField = emptyList;\n          break;\n\n        case \"issue\":\n          newState.issueField = emptyList;\n          break;\n\n        case \"program\":\n          newState.programField = emptyList;\n          break;\n\n        case \"response\":\n          newState.responseField = emptyList;\n          break;\n\n        case \"user\":\n          newState.userField = emptyList;\n          break;\n\n        default:\n          //console.log(\"unrecognized field name in reducer\");\n          break;\n      }\n\n      break;\n\n    case \"ADDADMIN\":\n      newList = [...state.adminField];\n      freshen(newList);\n      newList.push(action.payload);\n      newList.sort();\n      newState.adminField = newList;\n      break;\n\n    case \"DELETEADMIN\":\n      newList = [...state.adminField];\n      i = 0;\n      length = newList.length;\n\n      for (i; i < length; i++) {\n        if (newList[i] === action.payload) {\n          break;\n        }\n      }\n\n      newList.splice(i, 1);\n      newState.adminField = newList;\n      break;\n\n    case \"ADDADDRESS\":\n      newList = [...state.addressField];\n      freshen(newList);\n      newList.push(action.payload);\n      newList.sort();\n      newState.addressField = newList;\n      break;\n\n    case \"DELETEADDRESS\":\n      newList = [...state.addressField];\n      i = 0;\n      length = newList.length;\n\n      for (i; i < length; i++) {\n        if (newList[i] === action.payload) {\n          break;\n        }\n      }\n\n      newList.splice(i, 1);\n      newState.addressField = newList;\n      break;\n\n    case \"ADDISSUE\":\n      newList = [...state.issueField];\n      freshen(newList);\n      newList.push(action.payload);\n      newList.sort();\n      newState.issueField = newList;\n      break;\n\n    case \"DELETEISSUE\":\n      newList = [...state.issueField];\n      i = 0;\n      length = newList.length;\n\n      for (i; i < length; i++) {\n        if (newList[i] === action.payload) {\n          break;\n        }\n      }\n\n      newList.splice(i, 1);\n      newState.issueField = newList;\n      break;\n\n    case \"ADDRESPONSE\":\n      newList = [...state.responseField];\n      freshen(newList);\n      newList.push(action.payload);\n      newList.sort();\n      newState.responseField = newList;\n      break;\n\n    case \"DELETERESPONSE\":\n      newList = [...state.responseField];\n      i = 0;\n      length = newList.length;\n\n      for (i; i < length; i++) {\n        if (newList[i] === action.payload) {\n          break;\n        }\n      }\n\n      newList.splice(i, 1);\n      newState.responseField = newList;\n      break;\n\n    case \"ADDPROGRAM\":\n      newList = [...state.programField];\n      freshen(newList);\n      newList.push(action.payload);\n      newList.sort();\n      newState.programField = newList;\n      break;\n\n    case \"DELETEPROGRAM\":\n      newList = [...state.programField];\n      i = 0;\n      length = newList.length;\n\n      for (i; i < length; i++) {\n        if (newList[i] === action.payload) {\n          break;\n        }\n      }\n\n      newList.splice(i, 1);\n      newState.programField = newList;\n      break;\n\n    case \"ADDUSER\":\n      newList = [...state.userField];\n      freshen(newList);\n      newList.push(action.payload);\n      newList.sort();\n      newState.userField = newList;\n      break;\n\n    case \"DELETEUSER\":\n      newList = [...state.userField];\n      i = 0;\n      length = newList.length;\n\n      for (i; i < length; i++) {\n        if (newList[i] === action.payload) {\n          break;\n        }\n      }\n\n      newList.splice(i, 1);\n      newState.userField = newList;\n      break;\n\n    default:\n      break;\n  }\n\n  return newState;\n};\n\nconst store = createStore(combineReducers({\n  userAuthReducer,\n  fieldReducer\n})); //store.subscribe(()=>{console.log(store.getState())});\n\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 214\n  },\n  __self: this\n}, React.createElement(FirebaseContext.Provider, {\n  value: new Firebase(),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 215\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 216\n  },\n  __self: this\n}))), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/dloyd/summer_sc/ShelterCareAdminPort/src/index.js"],"names":["React","ReactDOM","createStore","combineReducers","Provider","App","serviceWorker","Firebase","FirebaseContext","emptyMsg","initialState","userSignedIn","email","userName","userAuthReducer","state","action","newState","type","payload","isAdmin","initialFieldState","responseField","issueField","userField","adminField","programField","addressField","status","freshen","listIn","length","console","log","pop","fieldReducer","i","newList","emptyList","push","sort","splice","store","render","document","getElementById","unregister"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore, combineReducers} from \"redux\";\nimport {Provider} from \"react-redux\"\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\nimport Firebase, {FirebaseContext} from './components/firebase';\nimport {emptyMsg} from './constants/emptyMessages';\n\nconst initialState = {userSignedIn: false,\n    email: \"\",\n    userName: \"\"};\nconst userAuthReducer = (state=initialState, action) => {\n    //state takes in an intial state at program intialization, all other calls will have a state input\n    var newState = {...state};\n\n    switch(action.type)\n    {\n        case \"SIGNIN\":\n            newState.email = action.payload.email;\n            newState.userName = action.payload.userName;\n            newState.userSignedIn = true;\n            newState.isAdmin = action.payload.isAdmin;\n            break;\n        case \"SIGNOUT\":\n            newState.userSignedIn = false;\n            newState.isAdmin = false;\n            newState.email = \"\";\n            newState.userName = \"\";\n            break;\n        default:\n            //console.log(\"error in userAuthReducer, unknown action type: \", action.type);\n            break;\n    }\n    return newState;\n};\nconst initialFieldState = {responseField: [],\n                            issueField: [],\n                            userField: [],\n                            adminField: [],\n                            programField: [],\n                            addressField: [],\n                            status: \"no action taken\"\n                            };\nfunction freshen(listIn)\n{\n    // removes no entries message from the list\n    if(listIn.length == 1 && listIn[0] === emptyMsg )\n    {\n        console.log(\"popping from: \", listIn);\n        listIn.pop();\n    }\n}\nconst fieldReducer = (state=initialFieldState, action) => {\n    var newState = {...state};\n    var length, i;\n    var newList = [];\n    switch(action.type)\n    {\n        case \"UPDATESTATUS\":\n            newState.status = action.payload;\n            break;\n        case \"CLEARLIST\":\n            var emptyList = [];\n            switch (action.payload)\n            {\n                case \"all\":\n                    newState = initialFieldState;\n                    newState.status = state.status;\n                    break;\n                case \"admin\":\n                    newState.adminField = emptyList;\n                    break;\n                case \"address\":\n                    newState.addressField = emptyList;\n                    break;\n                case \"issue\":\n                    newState.issueField = emptyList;\n                    break;\n                case \"program\":\n                    newState.programField = emptyList;\n                    break;\n                case \"response\":\n                    newState.responseField = emptyList;\n                    break;\n                case \"user\":\n                    newState.userField = emptyList;\n                    break;\n                default:\n                    //console.log(\"unrecognized field name in reducer\");\n                    break;\n            }\n            break;\n        case \"ADDADMIN\":\n            newList = [...state.adminField];\n            freshen(newList);\n            newList.push(action.payload);\n            newList.sort();\n            newState.adminField = newList;\n            break;\n        case \"DELETEADMIN\":\n            newList = [...state.adminField];\n            i = 0;\n            length = newList.length;\n            for(i; i<length; i++)\n            {\n                if(newList[i] === action.payload){break;}\n            }\n            newList.splice(i, 1);\n            newState.adminField = newList;\n            break;\n        case \"ADDADDRESS\":\n            newList = [...state.addressField];\n            freshen(newList);\n            newList.push(action.payload);\n            newList.sort();\n            newState.addressField = newList;\n            break;\n        case \"DELETEADDRESS\":\n            newList = [...state.addressField];\n            i = 0;\n            length = newList.length;\n            for(i; i<length; i++)\n            {\n                if(newList[i] === action.payload){break;}\n            }\n            newList.splice(i, 1);\n            newState.addressField = newList;\n            break;\n        case \"ADDISSUE\":\n            newList = [...state.issueField];\n            freshen(newList);\n            newList.push(action.payload);\n            newList.sort();\n            newState.issueField = newList;\n            break;\n        case \"DELETEISSUE\":\n            newList = [...state.issueField];\n            i = 0;\n            length = newList.length;\n            for(i; i<length; i++)\n            {\n                if(newList[i] === action.payload){break;}\n            }\n            newList.splice(i, 1);\n            newState.issueField = newList;\n            break;\n        case \"ADDRESPONSE\":\n            newList = [...state.responseField];\n            freshen(newList);\n            newList.push(action.payload);\n            newList.sort();\n            newState.responseField = newList;\n            break;\n        case \"DELETERESPONSE\":\n            newList = [...state.responseField];\n            i = 0;\n            length = newList.length;\n            for(i; i<length; i++)\n            {\n               if(newList[i] === action.payload){break;}\n            }\n            newList.splice(i, 1);\n            newState.responseField = newList;\n            break;\n        case \"ADDPROGRAM\":\n            newList = [...state.programField];\n            freshen(newList);\n            newList.push(action.payload);\n            newList.sort();\n            newState.programField = newList;\n            break;\n        case \"DELETEPROGRAM\":\n            newList = [...state.programField];\n            i = 0;\n            length = newList.length;\n            for(i; i<length; i++)\n            {\n                if(newList[i] === action.payload){break;}\n            }\n            newList.splice(i, 1);\n            newState.programField = newList;\n            break;\n        case \"ADDUSER\":\n            newList = [...state.userField];\n            freshen(newList);\n\n            newList.push(action.payload);\n            newList.sort();\n            newState.userField = newList;\n            break;\n        case \"DELETEUSER\":\n            newList = [...state.userField];\n            i = 0;\n            length = newList.length;\n            for(i; i<length; i++)\n            {\n                if(newList[i] === action.payload){break;}\n            }\n            newList.splice(i, 1);\n            newState.userField = newList;\n            break;\n        default:\n            break;\n    }\n    return newState;\n};\n\nconst store = createStore(combineReducers({userAuthReducer, fieldReducer}));\n//store.subscribe(()=>{console.log(store.getState())});\n\nReactDOM.render(\n    <Provider store={store}>\n        <FirebaseContext.Provider value={new Firebase()}>\n            <App />\n        </FirebaseContext.Provider>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}