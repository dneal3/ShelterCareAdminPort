{"ast":null,"code":"var _jsxFileName = \"/Users/dloyd/summer_sc/ShelterCareAdminPort/src/components/fieldBar/index.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport DatabaseTable from '../dataTable';\nimport { Accordion, AccordionItem } from 'react-sanfona';\n\nclass Fields extends React.Component {\n  updateList(newElement, type, clearList = false) {\n    //updates the list, clearing it instead if clearList = true\n    //TODO: change to make dynamic\n    if (clearList) {\n      this.props.clearList(type);\n    } else {\n      this.props.updateField(\"ADD\" + type.toUpperCase(), newElement);\n    }\n  }\n\n  getField(field) {\n    //returns the react elements to render the list of the given field\n    var fieldList;\n\n    switch (field) {\n      case \"admin\":\n        fieldList = this.props.fields.adminField;\n        break;\n\n      case \"issue\":\n        fieldList = this.props.fields.issueField;\n        break;\n\n      case \"response\":\n        fieldList = this.props.fields.responseField;\n        break;\n\n      case \"program\":\n        fieldList = this.props.fields.programField;\n        break;\n\n      case \"user\":\n        fieldList = this.props.fields.userField;\n        break;\n\n      case \"address\":\n        //TODO are we supporting addresses?\n        fieldList = this.props.fields.addressField;\n        break;\n\n      default:\n        //  console.log('unrecognized field ' + field + ' name in getField');\n        fieldList = []; // avoid crash by iterating over nothing\n\n        break;\n    }\n\n    return fieldList;\n  }\n\n  render() {\n    // console.log(this.props.fields);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Accordion, {\n      allowMultiple: true,\n      className: \"container-fluid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, ['User', 'Admin', 'Program', 'Issue', 'Response', 'Address'].map(item => {\n      return React.createElement(AccordionItem, {\n        key: item + \"-accordian\",\n        title: \"\".concat(item, \" List\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(DatabaseTable, {\n        updateList: this.updateList.bind(this),\n        query: item,\n        firebase: this.props.firebase,\n        updateStatus: this.props.updateStatus,\n        updateField: this.props.updateField,\n        elements: this.getField(item.toLowerCase()),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }));\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    fields: state.fieldReducer\n  };\n};\n\nconst mapDispatcherToProps = dispatch => {\n  return {\n    updateStatus: newStatus => {\n      dispatch({\n        type: \"UPDATESTATUS\",\n        payload: newStatus\n      });\n    },\n    updateField: (updateType, element) => {\n      dispatch({\n        type: updateType,\n        payload: element\n      });\n    },\n    clearList: fieldName => {\n      dispatch({\n        type: \"CLEARLIST\",\n        payload: fieldName\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatcherToProps)(Fields);","map":{"version":3,"sources":["/Users/dloyd/summer_sc/ShelterCareAdminPort/src/components/fieldBar/index.js"],"names":["React","connect","DatabaseTable","Accordion","AccordionItem","Fields","Component","updateList","newElement","type","clearList","props","updateField","toUpperCase","getField","field","fieldList","fields","adminField","issueField","responseField","programField","userField","addressField","render","map","item","bind","firebase","updateStatus","toLowerCase","mapStateToProps","state","fieldReducer","mapDispatcherToProps","dispatch","newStatus","payload","updateType","element","fieldName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport DatabaseTable from '../dataTable';\nimport { Accordion, AccordionItem } from 'react-sanfona';\n\n\nclass Fields extends React.Component\n{\n    \n    updateList(newElement, type, clearList=false)\n    {\n        //updates the list, clearing it instead if clearList = true\n        //TODO: change to make dynamic\n        if(clearList)\n        {\n            this.props.clearList(type);\n        }\n        else\n        {\n            this.props.updateField(\"ADD\"+type.toUpperCase(), newElement);\n        }\n    }\n    getField(field)\n    {\n        //returns the react elements to render the list of the given field\n        var fieldList;\n        switch(field)\n        {\n            \n            case \"admin\":\n                fieldList = this.props.fields.adminField;\n                break;\n            case \"issue\":\n                fieldList = this.props.fields.issueField;\n                break;\n            case \"response\":\n                fieldList = this.props.fields.responseField;\n                break;\n            case \"program\":\n                fieldList = this.props.fields.programField;\n                break;\n            case \"user\":\n                fieldList = this.props.fields.userField;\n                break;\n            case \"address\":\n                //TODO are we supporting addresses?\n                fieldList = this.props.fields.addressField;\n                break;\n            default:\n              //  console.log('unrecognized field ' + field + ' name in getField');\n                fieldList = []; // avoid crash by iterating over nothing\n                break;\n        }      \n        return fieldList;\n    }\n    \n    render(){\n       // console.log(this.props.fields);\n        return(\n            <div>\n                <Accordion allowMultiple className='container-fluid'>\n        {['User', 'Admin', 'Program', 'Issue', 'Response', 'Address'].map(item => {\n          return (\n            <AccordionItem key = {item+\"-accordian\"} title={`${item} List`}>\n              <DatabaseTable updateList = {this.updateList.bind(this)} query={item} firebase={this.props.firebase} updateStatus={this.props.updateStatus} updateField={this.props.updateField} elements={this.getField(item.toLowerCase())}/>\n            </AccordionItem>\n\n          );\n        })}\n      </Accordion>\n        </div>\n        );\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        fields: state.fieldReducer\n    }\n};\nconst mapDispatcherToProps = (dispatch) => {\n    return {\n        updateStatus: (newStatus) => {dispatch({type: \"UPDATESTATUS\", payload: newStatus})},\n        updateField: (updateType, element) => {\n            dispatch({type: updateType, payload: element});\n        },\n        clearList: (fieldName) => {dispatch({type: \"CLEARLIST\", payload: fieldName});}\n    }\n};\nexport default connect(mapStateToProps, mapDispatcherToProps)(Fields);"]},"metadata":{},"sourceType":"module"}